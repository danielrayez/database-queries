Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table = 10000
ii. Business table = 10000
iii. Category table = 10000
iv. Checkin table = 10000
v. elite_years table = 10000
vi. friend table = 10000
vii. hours table = 10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. 
If two foreign keys are listed in the table, please specify which foreign key.

i. Business = 10000
ii. Hours = 1562 (fk business_id)
iii. Category = 2643 (fk business_id)
iv. Attribute = 1115 (fk business_id)
v. Review = 10000 (pk)
vi. Checkin = 493 (fk business_id)
vii. Photo = 10000 (pk)
viii. Tip = 537 (fk user_id)
ix. User = 10000
x. Friend = 11 (fk user_id)
xi. Elite_years = 2780 (fk user_id)

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: No
	
	
	SQL code used to arrive at answer:

	SELECT COUNT(null) from user;


p.s.: I first check out if there are null values in all table. Since there are no null values 
in the table, therefore there are no columns with null values. 
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg: 3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:	5.0	avg: 3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:	0	max:	2	avg: 0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg: 1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg: 24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer:
	
 	SELECT city, sum(review_count) as Most_Review 
		FROM business
		GROUP BY city
		ORDER BY Most_Review DESC;

	
	Copy and Paste the Result Below:
	
+-----------------+-------------+
| city            | Most_Review |
+-----------------+-------------+
| Las Vegas       |       82854 |
| Phoenix         |       34503 |
| Toronto         |       24113 |
| Scottsdale      |       20614 |
| Charlotte       |       12523 |
| Henderson       |       10871 |
| Tempe           |       10504 |
| Pittsburgh      |        9798 |
| Montréal        |        9448 |
| Chandler        |        8112 |
| Mesa            |        6875 |
| Gilbert         |        6380 |
| Cleveland       |        5593 |
| Madison         |        5265 |
| Glendale        |        4406 |
| Mississauga     |        3814 |
| Edinburgh       |        2792 |
| Peoria          |        2624 |
| North Las Vegas |        2438 |
| Markham         |        2352 |
| Champaign       |        2029 |
| Stuttgart       |        1849 |
| Surprise        |        1520 |
| Lakewood        |        1465 |
| Goodyear        |        1155 |
+-----------------+-------------+
(Output limit exceeded, 25 of 362 total rows shown)

	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:

SELECT stars AS 'Star rating', count(stars) AS Count 
    FROM business
    WHERE city = 'Avon'
    GROUP BY stars;


Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| Star rating | Count |
+-------------+-------+
|         1.5 |     1 |
|         2.5 |     2 |
|         3.5 |     3 |
|         4.0 |     2 |
|         4.5 |     1 |
|         5.0 |     1 |
+-------------+-------+

ii. Beachwood

SQL code used to arrive at answer:

SELECT stars AS 'Star rating', count(stars) AS Count 
    FROM business
    WHERE city = 'Beachwood'
    GROUP BY star;

Copy and Paste the Resulting Table Below (2 columns â€“ star rating and count):

+-------------+-------+
| Star rating | Count |
+-------------+-------+
|         2.0 |     1 |
|         2.5 |     1 |
|         3.0 |     2 |
|         3.5 |     2 |
|         4.0 |     1 |
|         4.5 |     2 |
|         5.0 |     5 |
+-------------+-------+


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
SELECT name, review_count
    FROM user	
    ORDER BY review_count DESC
    LIMIT 3;
		
	Copy and Paste the Result Below:
		
+--------+--------------+
| name   | review_count |
+--------+--------------+
| Gerald |         2000 |
| Sara   |         1629 |
| Yuri   |         1339 |
+--------+--------------+

8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:

+---------+--------------+------+--------+--------+--------+--------------+
| name    | review_count | fans | useful |   cool |  funny |  rew_c/fans  |
+---------+--------------+------+--------+--------+--------+--------------+
| Gerald  |         2000 |  253 |  17524 |  15008 |   2324 |            7 |
| Sara    |         1629 |   50 |     25 |      2 |     10 |           32 |
| Yuri    |         1339 |   76 |   1166 |    561 |    220 |           17 |
| .Hon    |         1246 |  101 |   7850 |   5104 |   5851 |           12 |
| William |         1215 |  126 |   9363 |   9370 |   9361 |            9 |
| Harald  |         1153 |  311 | 122921 | 122890 | 122419 |            3 |
+---------+--------------+------+--------+--------+--------+--------------+

Of course, whoever has more reviews will probably have more followers, however, the correlation between
the review and the fans depends more on how "helpful" or "great" or "fun" the review was.

For example, Harald has more fans than Gerald, who has a lot more critics than Harald. This is so
because Harald's reviews are more "helpful" or "cool" or "fun" than Gerald's review.

In the table above, the calculation column 'rew_c/fans shows how the correlation between reviews is
and amateurs. The closer the number is to 1, the more correlation there is.


9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer: Yes, there is more word 'love' than 'hate' in the reviews
	

	
	SQL code used to arrive at answer:

SELECT 'love' Word, COUNT(text) AS "Total Count"
	FROM review
	WHERE text LIKE '%love%'
	UNION
SELECT 'hate' Word, COUNT(text) AS "Total Count"
	FROM review
	WHERE text LIKE '%hate%'
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
	
SELECT name, fans
	FROM user
	ORDER BY fans DESC
	LIMIT 10

	
	Copy and Paste the Result Below:
+-----------+------+
| name      | fans |
+-----------+------+
| Amy       |  503 |
| Mimi      |  497 |
| Harald    |  311 |
| Gerald    |  253 |
| Christine |  173 |
| Lisa      |  159 |
| Cat       |  133 |
| William   |  126 |
| Fran      |  124 |
| Lissa     |  120 |
+-----------+------+
	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or 
category by their overall star rating. 
Compare the businesses with 2-3 stars to the businesses with 4-5 stars and 
answer the following questions. Include your code.


i. Do the two groups you chose to analyze have a different distribution of hours?

Restaurants with "regular" Star Rating (2-3 stars), works every day between 11 or 14 hours 
Restaurants with "Excellent" Star Rating (4-5 stars), works every day between 8 or 12 hours


ii. Do the two groups you chose to analyze have a different number of reviews?

+------------------+-------------+---------+-------+--------------+---------+------------+
| name             | category    | city    | stars | review_count | is_open | StarRating |
+------------------+-------------+---------+-------+--------------+---------+------------+
| 99 Cent Sushi    | Restaurants | Toronto |   2.0 |            5 |       0 | Regular    |
| Sushi Osaka      | Restaurants | Toronto |   4.5 |            8 |       1 | Excellent  |
| Cabin Fever      | Restaurants | Toronto |   4.5 |           26 |       1 | Excellent  |
| Pizzaiolo        | Restaurants | Toronto |   3.0 |           34 |       1 | Regular    |
| Big Smoke Burger | Restaurants | Toronto |   3.0 |           47 |       1 | Regular    |
+------------------+-------------+---------+-------+--------------+---------+------------+

"Normal" restaurants get more reviews than big restaurants
Restaurant with the fewest reviews was a "regular" business now closed
         
iii. Are you able to infer anything from the location data provided between these two groups? Explain.

+------------------+-------------+---------+-------+--------------+----------+-----------+---------+------------+
| name             | category    | city    | stars | review_count | latitude | longitude | is_open | StarRating |
+------------------+-------------+---------+-------+--------------+----------+-----------+---------+------------+
| Sushi Osaka      | Restaurants | Toronto |   4.5 |            8 |  43.6452 |  -79.5324 |       1 | Excellent  |
| Cabin Fever      | Restaurants | Toronto |   4.5 |           26 |  43.6553 |  -79.4567 |       1 | Excellent  |
| 99 Cent Sushi    | Restaurants | Toronto |   2.0 |            5 |  43.6614 |   -79.379 |       0 | Regular    |
| Pizzaiolo        | Restaurants | Toronto |   3.0 |           34 |  43.6479 |  -79.3901 |       1 | Regular    |
| Big Smoke Burger | Restaurants | Toronto |   3.0 |           47 |  43.6546 |  -79.3805 |       1 | Regular    |
+------------------+-------------+---------+-------+--------------+----------+-----------+---------+------------+

'Regular' experience probably occurs below -79.4567 Longitude near to Latitude 46.000

SQL code used for analysis:

--Code to cluster by Star Rating the Restaurants businesses in Toronto. 
Depends to analysis I activate or not certains columns or  GROUP BY or ORDER BY clause

SELECT b.name, c.category, b.city, b.stars, b.review_count, b.latitude,b.longitude, b.is_open, h.hours, 
CASE
    WHEN b.stars < 2 THEN 'Bad'
    WHEN b.stars >= 2.0 AND b.stars <= 3.0 THEN 'Regular'
    WHEN b.stars > 3 AND b.stars < 4 THEN 'Good'
    WHEN b.stars > 4 THEN 'Excellent'
ELSE 'Out Of Category'
END StarRating
FROM business AS b
LEFT JOIN category AS c ON
    b.id = c.business_id
LEFT JOIN hours as h ON
    b.id = h.business_id
WHERE c.category IS NOT NULL
AND b.city = "Toronto" AND c.category = 'Restaurants'
AND StarRating IN( 'Excellent', 'Regular')
GROUP BY b.review_count 
ORDER BY StarRating


		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1:

The only closed restaurant is a 2-star rating, the lowest rating among restaurants in Toronto
         
ii. Difference 2:

The only closed restaurant is in the max longitude (43.6614) and max Latitude (-79.379); that is, all the open-restaurants are in a Longitude and Latitude below

         
         
SQL code used for analysis:

SELECT b.name, c.category, b.city, b.stars, b.review_count, b.latitude,b.longitude, b.is_open, h.hours, 
CASE
    WHEN b.stars < 2 THEN 'Bad'
    WHEN b.stars >= 2.0 AND b.stars <= 3.0 THEN 'Regular'
    WHEN b.stars > 3 AND b.stars < 4 THEN 'Good'
    WHEN b.stars > 4 THEN 'Excellent'
ELSE 'Out Of Category'
END StarRating
FROM business AS b
LEFT JOIN category AS c ON
    b.id = c.business_id
LEFT JOIN hours as h ON
    b.id = h.business_id
WHERE c.category IS NOT NULL
AND b.city = "Toronto" AND c.category = 'Restaurants'
AND StarRating IN( 'Excellent', 'Regular')
ORDER BY b.longitude DESC--StarRating
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, 
predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. 
These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:

Relationship between most stars qualifications and reviews comments with positive words
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:

Business.id                           
Business.Name


Review.id
Review.business_id
Review.star
Review.comment
Review.user_id

User.id
User.review_star
User.review_comment
User.review_id

iii. Output of your finished dataset:
         
         
iv. Provide the SQL code you used to create your final dataset:


SELECT b.Name, r.star, r.comment
FROM Business AS B
LEFT JOIN Review AS r ON
b.id = r.business_id
WHERE r.comment IS NOT NULL;



